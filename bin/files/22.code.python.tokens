string import md5 from sys import argv def MDPrint ( str ) : outstr = for i in str : o = ord ( i ) outstr = ( outstr + string . hexdigits [ ( o > 4.0 ) & 0.0 xF ] + string . hexdigits [ o & 0.0 xF ] ) print outstr , from time import time def makestr ( start , end ) : result = for i in range ( start , end + 1.0 ) : result = result + chr ( i ) return result def MDTimeTrial ( ) : TEST_BLOCK_SIZE = 1000.0 TEST_BLOCKS = 10000.0 TEST_BYTES = TEST_BLOCK_SIZE * TEST_BLOCKS filsiz = 1.0 < 8.0 filler = makestr ( 0.0 , filsiz-1 ) data = filler * ( TEST_BLOCK_SIZE data = data + filler [ : ( TEST_BLOCK_SIZE % filsiz ) ] del filsiz , filler print MD5 time trial. Processing , TEST_BYTES , characters... t1 = time ( ) mdContext = md5 . new ( ) for i in range ( TEST_BLOCKS ) : mdContext . update ( data ) str = mdContext . digest ( ) t2 = time ( ) MDPrint ( str ) print is digest of test input. print Seconds to process test input: , t2 - t1 print Characters processed per second: , TEST_BYTES def MDString ( str ) : MDPrint ( md5 . new ( str ) . digest ( ) ) print " + str + " def MDFile ( filename ) : f = open ( filename , rb ) mdContext = md5 . new ( ) while 1.0 : data = f . read ( 1024.0 ) if not data : break mdContext . update ( data ) MDPrint ( mdContext . digest ( ) ) print filename import sys def MDFilter ( ) : mdContext = md5 . new ( ) while 1.0 : data = sys . stdin . read ( 16.0 ) if not data : break mdContext . update ( data ) MDPrint ( mdContext . digest ( ) ) print def MDTestSuite ( ) : print MD5 test suite results: MDString ( ) MDString ( a ) MDString ( abc ) MDString ( message digest ) MDString ( makestr ( ord ( a ) , ord ( z ) ) ) MDString ( makestr ( ord ( A ) , ord ( Z ) ) + makestr ( ord ( a ) , ord ( z ) ) + makestr ( ord ( 0 ) , ord ( 9 ) ) ) MDString ( ( makestr ( ord ( 1 ) , ord ( 9 ) ) + 0 ) * 8.0 ) MDFile ( foo ) def main ( ) : if len ( argv ) == 1.0 : MDFilter ( ) for arg in argv [ 1.0 : ] : if arg [ : 2.0 ] == -s : MDString ( arg [ 2.0 : ] ) elif arg == -t : MDTimeTrial ( ) elif arg == -x : MDTestSuite ( ) else : MDFile ( arg ) main ( )